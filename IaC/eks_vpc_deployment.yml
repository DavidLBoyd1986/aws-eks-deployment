---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS VPC for an EKS Cluster. This is for a Public Cluster.'

Parameters:

  personalPublicIp:
    Type: String
    Default: 0.0.0.0/0 # Defaults to fully public if parameter is deleted from parameters.json
    Description: Add your personal Public IP as a parameter to access the Cluster. The Default value makes the Cluster fully public.
    # Must be added added as variable to build_script.sh or as a CICD variable in Gitlab or Jenkins Credential.

  VpcBlock:
    Type: String
    Default: 192.168.1.0/24
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PrivateSubnet01Block:
    Type: String
    Default: 192.168.1.0/25
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 192.168.1.128/25
    Description: CidrBlock for private subnet 02 within the VPC

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - PrivateSubnet01Block
          - PrivateSubnet02Block

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.1.0/24
      #CidrBlock:  !Ref VpcBlock # Testing if using parameter caused 2 VPCs to be created
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ2
      - Key: Network
        Value: Private02

  PrivateRoute01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0

  PrivateRoute02:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet01"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet02"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  EC2InterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
      SecurityGroupIds:
        - !Ref InterfaceEndpointSecurityGroup

  S3InterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
      SecurityGroupIds:
        - !Ref InterfaceEndpointSecurityGroup

  InterfaceEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for access Interface Endpoints
      VpcId: !Ref VPC
      GroupName: InterfaceEndpointSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VpcBlock
        - IpProtocol: udp 
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref VpcBlock
      SecurityGroupEgress:
        - IpProtocol: -1 
          CidrIp: 0.0.0.0/0 

# Allows the Cluster's private IP range to access the Control Plane, and the Control Plane to send return traffic anywhere.
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS Control Plane Security Group
      VpcId: !Ref VPC
      GroupName: ControlPlaneSecurityGroup 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443 
          CidrIp: !Ref VpcBlock
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443 
          CidrIp: 0.0.0.0/0

# This Security Group controls all access to the Cluster: Nodes, Pods, etc...
  WorkerNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Worker Node Security Group
      VpcId: !Ref VPC
      GroupName: WorkerNodeSecurityGroup 
      SecurityGroupIngress:
        # NODE ACCESS RULES:
          # These rules allow EKS VPC network traffic to access the Nodes.
          # A lot of these are only included because they are common non-standard http(s) ports:
          # i.e. 8080, 8443, 9443 - 9443 is required for the AWS Load Balancer Controller
        # Uncomment to allow all traffic
        #- IpProtocol: tcp
        #  FromPort: 0 
        #  ToPort: 65535 
        #  CidrIp: !Ref VpcBlock
        # Uncomment to use NodePort Services
        #- IpProtocol: tcp
        #  FromPort: 30000
        #  ToPort: 32767
        #  CidrIp: !Ref VpcBlock
        - IpProtocol: tcp # Required
          FromPort: 80 
          ToPort: 80
          CidrIp: !Ref VpcBlock
        - IpProtocol: tcp
          FromPort: 8080 
          ToPort: 8080
          CidrIp: !Ref VpcBlock
        - IpProtocol: tcp # Required
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcBlock
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref VpcBlock
        - IpProtocol: tcp # Required
          FromPort: 9443
          ToPort: 9443
          CidrIp: !Ref VpcBlock
        - IpProtocol: tcp # Required
          FromPort: 10250
          ToPort: 10250
          CidrIp: !Ref VpcBlock
        # BASTION HOST ACCESS RULES:
          # These allow traffic from the Bastion Host VPC to interact with the Cluster
          # A lot of these are only included because they are common non-standard http(s) ports:
        # Uncomment to allow all traffic
        #- IpProtocol: tcp
        #  FromPort: 0 
        #  ToPort: 65535 
        #  CidrIp: !ImportValue BHVpcCidrBlock
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue BHVpcCidrBlock
        - IpProtocol: icmpv6
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue BHVpcCidrBlock
        - IpProtocol: tcp # Required
          FromPort: 80 
          ToPort: 80
          CidrIp: !ImportValue BHVpcCidrBlock
        - IpProtocol: tcp
          FromPort: 8080 
          ToPort: 8080
          CidrIp: !ImportValue BHVpcCidrBlock
        - IpProtocol: tcp # Required
          FromPort: 443
          ToPort: 443
          CidrIp: !ImportValue BHVpcCidrBlock
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !ImportValue BHVpcCidrBlock
        - IpProtocol: tcp 
          FromPort: 9443
          ToPort: 9443
          CidrIp: !ImportValue BHVpcCidrBlock
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

Outputs:

  SubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref PrivateSubnet01, !Ref PrivateSubnet02 ] ]

  PrivateSubnet01:
    Description: The subnet ID for private subnet 01
    Value:
      Ref: PrivateSubnet01
    Export:
      Name: EKSPrivateCluster-PrivateSubnetOne

  PrivateSubnet02:
    Description: The subnet ID for private subnet 02
    Value:
      Ref: PrivateSubnet02
    Export:
      Name: EKSPrivateCluster-PrivateSubnetTwo

  ControlPlaneSecurityGroup:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Ref ControlPlaneSecurityGroup
    Export:
      Name: EKSPrivateCluster-ControlPlaneSecurityGroup

  WorkerNodeSecurityGroup:
    Description: Security group for the cluster worker nodes
    Value: !Ref WorkerNodeSecurityGroup
    Export:
      Name: EKSPrivateCluster-WorkerNodeSecurityGroup

  EksVpcId:
    Description: The VPC Id
    Value: !Ref VPC
    Export:
      Name: EKSPrivateCluster-VpcId
 
  VpcBlock:
    Description: CIDR for VPC Block
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: EKSPrivateCluster-VpcCidrBlock
